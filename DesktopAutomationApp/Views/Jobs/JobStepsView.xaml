<UserControl x:Class="DesktopAutomationApp.Views.JobStepsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="clr-namespace:DesktopAutomationApp.ViewModels"
             xmlns:jobs="clr-namespace:TaskAutomation.Jobs;assembly=TaskAutomation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:conv="clr-namespace:DesktopAutomationApp.Converters"
             mc:Ignorable="d"
             Style="{StaticResource ContentViewBase}">

    <UserControl.Resources>
        <conv:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <conv:InverseBooleanToContentConverter x:Key="InverseBooleanToContentConverter"/>
        <conv:RectToStringConverter x:Key="RectToStringConverter"/>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

        <!-- Gemeinsame Parameterzeile -->
        <Style x:Key="ParamText" TargetType="TextBlock">
            <Setter Property="Margin" Value="0,2,0,2"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
        </Style>

        <!-- === Deine Step-DataTemplates (unverändert) === -->
        <!-- TemplateMatchingStep -->
        <DataTemplate DataType="{x:Type jobs:TemplateMatchingStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Template Matching" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="TemplatePath: "/><Run Text="{Binding Settings.TemplatePath}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="MatchMode: "/><Run Text="{Binding Settings.TemplateMatchMode}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="ConfidenceThreshold: "/><Run Text="{Binding Settings.ConfidenceThreshold, StringFormat=F2}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="EnableROI: "/>
                        <Run Text="{Binding Settings.EnableROI, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="ROI (X,Y,Breite,Höhe): "/>
                        <Run Text="{Binding Settings.ROI, Converter={StaticResource RectToStringConverter}}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="DrawResults: "/>
                        <Run Text="{Binding Settings.DrawResults, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <!-- DesktopDuplicationStep -->
        <DataTemplate DataType="{x:Type jobs:DesktopDuplicationStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Desktop Duplication" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Desktop Index: "/><Run Text="{Binding Settings.DesktopIdx}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <!-- ProcessDuplicationStep -->
        <DataTemplate DataType="{x:Type jobs:ProcessDuplicationStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Process Duplication" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="ProcessName: "/><Run Text="{Binding Settings.ProcessName}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <!-- ShowImageStep -->
        <DataTemplate DataType="{x:Type jobs:ShowImageStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Show Image" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="WindowName: "/><Run Text="{Binding Settings.WindowName}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="ShowRawImage: "/>
                        <Run Text="{Binding Settings.ShowRawImage, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="ShowProcessedImage: "/>
                        <Run Text="{Binding Settings.ShowProcessedImage, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <!-- VideoCreationStep -->
        <DataTemplate DataType="{x:Type jobs:VideoCreationStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Video Creation" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="SavePath: "/><Run Text="{Binding Settings.SavePath}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="FileName: "/><Run Text="{Binding Settings.FileName}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="UseRawImage: "/>
                        <Run Text="{Binding Settings.UseRawImage, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="UseProcessedImage: "/>
                        <Run Text="{Binding Settings.UseProcessedImage, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <!-- MakroExecutionStep -->
        <DataTemplate DataType="{x:Type jobs:MakroExecutionStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Makro Execution" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="MakroName: "/><Run Text="{Binding Settings.MakroName}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type jobs:KlickOnPointStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Klick auf Punkt" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Doppelklick: "/>
                        <Run Text="{Binding Settings.DoubleClick, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Klick-Typ: "/><Run Text="{Binding Settings.ClickType}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Timeout (ms): "/><Run Text="{Binding Settings.TimeoutMs}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type jobs:KlickOnPoint3DStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Klick auf Punkt 3D" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="FOV: "/><Run Text="{Binding Settings.FOV, StringFormat=F1}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Maus Sensitivity X: "/><Run Text="{Binding Settings.MausSensitivityX, StringFormat=F2}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Maus Sensitivity Y: "/><Run Text="{Binding Settings.MausSensitivityY, StringFormat=F2}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Doppelklick: "/>
                        <Run Text="{Binding Settings.DoubleClick, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Klick-Typ: "/><Run Text="{Binding Settings.ClickType}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Timeout (ms): "/><Run Text="{Binding Settings.Timeout}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type jobs:ScriptExecutionStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Script Ausführung" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Script-Pfad: "/><Run Text="{Binding Settings.ScriptPath}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Fire and Forget: "/>
                        <Run Text="{Binding Settings.FireAndForget, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type jobs:JobExecutionStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Job Ausführung" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Job-Name: "/><Run Text="{Binding Settings.JobName}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Auf Beendigung warten: "/>
                        <Run Text="{Binding Settings.WaitForCompletion, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <!-- YOLODetectionStep -->
        <DataTemplate DataType="{x:Type jobs:YOLODetectionStep}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="YOLO Detection" FontWeight="Bold" VerticalAlignment="Top"/>
                <Border Grid.Column="1"/>
                <StackPanel Grid.Column="2">
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Model: "/><Run Text="{Binding Settings.Model}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="Klassenname: "/><Run Text="{Binding Settings.ClassName}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="ConfidenceThreshold: "/><Run Text="{Binding Settings.ConfidenceThreshold, StringFormat=F2}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="EnableROI: "/>
                        <Run Text="{Binding Settings.EnableROI, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="ROI (X,Y,Breite,Höhe): "/>
                        <Run Text="{Binding Settings.ROI, Converter={StaticResource RectToStringConverter}}"/>
                    </TextBlock>
                    <TextBlock Style="{StaticResource ParamText}">
                        <Run Text="DrawResults: "/>
                        <Run Text="{Binding Settings.DrawResults, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Nein,Ja'}"/>
                    </TextBlock>
                </StackPanel>
            </Grid>
        </DataTemplate>

    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Header: Zurück + Titel -->
        <StackPanel Orientation="Horizontal" Margin="0,0,0,8">
            <Button Content="⟵ Zurück"
                    Command="{Binding BackCommand}"
                    Margin="0,0,12,0"
                    FontSize="14"/>
            <TextBlock Text="{Binding Title}" Style="{StaticResource Heading1}"/>
        </StackPanel>

        <!-- Unterer Bereich: wie Makro-Ansicht (DockPanel + ListBox mit Hover/Selected) -->
        <Border Grid.Row="1" Style="{StaticResource CardBorderStyle}">
            <DockPanel>

                <!-- Optionaler Kopfbereich im Panel (nur Layout, Logik folgt später) -->
                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" Margin="12,12,12,0" Height="30">
                    <Button Content="Neuen Step hinzufügen"
                            Command="{Binding AddStepCommand}"
                            FontSize="13"/>
                    <!-- Platz für weitere Controls bei Bedarf -->
                </StackPanel>

                <!-- ListBox mit Hover-/Selected-Rahmen wie im Makro -->
                <ListBox ItemsSource="{Binding Steps}"
                         SelectedItem="{Binding SelectedStep, Mode=TwoWay}"
                         ScrollViewer.VerticalScrollBarVisibility="Auto"
                         ScrollViewer.HorizontalScrollBarVisibility="Disabled">

                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                            <Setter Property="VerticalContentAlignment"   Value="Stretch"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ListBoxItem">
                                        <Border Background="{TemplateBinding Background}">
                                            <Border x:Name="Card"
                                                    Margin="12,8,12,0"
                                                    Padding="12"
                                                    Background="Transparent"
                                                    BorderBrush="{DynamicResource MahApps.Brushes.Control.Border}"
                                                    BorderThickness="1"
                                                    CornerRadius="8">
                                                <ContentPresenter/>
                                            </Border>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <!-- Hover -->
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="Card" Property="BorderBrush"
                                                        Value="{DynamicResource MahApps.Brushes.Highlight}"/>
                                                <Setter TargetName="Card" Property="BorderThickness" Value="2"/>
                                            </Trigger>
                                            <!-- Selected -->
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter TargetName="Card" Property="BorderBrush"
                                                        Value="{DynamicResource MahApps.Brushes.Accent}"/>
                                                <Setter TargetName="Card" Property="Background"
                                                        Value="{DynamicResource MahApps.Brushes.Accent}"/>
                                                <Setter TargetName="Card" Property="BorderThickness" Value="2"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.ItemContainerStyle>

                    <!-- Inhalt + Aktionsleiste rechts (Edit/Hoch/Runter/Delete exakt wie Makro) -->
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <!-- Links: Step-Details via implizite DataTemplates -->
                                <ContentPresenter Grid.Column="0" Content="{Binding}"/>

                                <!-- Rechts: Buttons identisch zur Makro-Ansicht -->
                                <StackPanel Grid.Column="1"
                                            Orientation="Horizontal"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Center"
                                            Margin="8,0,0,0">
                                    <!-- Bearbeiten -->
                                    <Button Content="Edit"
                                            Width="50" Height="35" Margin="0,0,30,0" FontSize="13"
                                            ToolTip="Step bearbeiten"
                                            Command="{Binding DataContext.EditStepCommand, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                            CommandParameter="{Binding}"/>
                                    <!-- ▲ nach oben -->
                                    <Button Content="▲"
                                            Width="35" Height="35" Margin="0,0,4,0"
                                            ToolTip="Schritt nach oben"
                                            Command="{Binding DataContext.MoveStepUpCommand, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                            CommandParameter="{Binding}"/>
                                    <!-- ▼ nach unten -->
                                    <Button Content="▼"
                                            Width="35" Height="35" Margin="0,0,4,0"
                                            ToolTip="Schritt nach unten"
                                            Command="{Binding DataContext.MoveStepDownCommand, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                            CommandParameter="{Binding}"/>
                                    <!-- Löschen -->
                                    <Button Content="Delete"
                                            Width="60" Height="35" Margin="80,0,0,0" FontSize="13"
                                            ToolTip="Step löschen"
                                            Command="{Binding DataContext.DeleteStepCommand, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                            CommandParameter="{Binding}"/>
                                </StackPanel>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

            </DockPanel>
        </Border>
    </Grid>
</UserControl>
