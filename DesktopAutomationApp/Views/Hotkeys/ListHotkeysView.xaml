<UserControl x:Class="DesktopAutomationApp.Views.ListHotkeysView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="clr-namespace:DesktopAutomationApp.ViewModels"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:conv="clr-namespace:DesktopAutomationApp.Converters"
             mc:Ignorable="d"
             Style="{StaticResource ContentViewBase}">

    <UserControl.Resources>
        <!-- Nur noch allgemeine Converter nötig -->
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <conv:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <conv:InverseBooleanToContentConverter x:Key="InverseBooleanToContentConverter"/>
        <Style x:Key="AutoOpenComboStyle" TargetType="ComboBox"
           BasedOn="{StaticResource {x:Type ComboBox}}">
            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="ComboBox_PreviewMouseLeftButtonDown"/>
            <EventSetter Event="GotKeyboardFocus" Handler="ComboBox_GotKeyboardFocus"/>
        </Style>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <!-- Toolbar -->
            <RowDefinition Height="2*"/>
            <!-- Liste -->
            <RowDefinition Height="Auto"/>
            <!-- Editor -->
        </Grid.RowDefinitions>

        <!-- Toolbar -->
        <StackPanel Orientation="Horizontal" Margin="0,0,0,8">
            <TextBlock Text="Hotkeys" Style="{StaticResource Heading1}" Margin="0,0,12,0"/>
            <Button Content="Aktualisieren"
            Command="{Binding RefreshCommand}"
            Margin="8,0,0,0"
            ToolTip="Hotkeys und Jobs neu laden" 
            FontSize="14"/>

            <Button Content="Neu"
            Command="{Binding NewCommand}"
            Margin="8,0,0,0"
            ToolTip="Neuen Hotkey anlegen" 
            FontSize="14"/>

            <Button Content="Löschen"
            Command="{Binding DeleteCommand}"
            Margin="8,0,0,0"
            ToolTip="Ausgewählten Hotkey löschen" 
            FontSize="14"/>

            <TextBlock Text="{Binding Items.Count, StringFormat='  ({0} Hotkeys)'}"
               Margin="8,0,0,0" VerticalAlignment="Center"/>
        </StackPanel>

        <!-- Liste -->
        <Border Grid.Row="1" Style="{StaticResource CardBorderStyle}">
            <DataGrid ItemsSource="{Binding Items}"
                      SelectedItem="{Binding Selected}"
                      AutoGenerateColumns="False"
                      CanUserAddRows="False"
                      CanUserDeleteRows="False"
                      IsReadOnly="False"
                      ScrollViewer.CanContentScroll="False">

                <DataGrid.InputBindings>
                    <KeyBinding Key="Delete" Command="{Binding DeleteCommand}"/>
                </DataGrid.InputBindings>

                <DataGrid.Columns>
                    <DataGridTextColumn Header="Name" Binding="{Binding Name}" IsReadOnly="True" Width="2*"/>
                    <!-- Trigger direkt aus EditableHotkey.DisplayTrigger -->
                    <DataGridTextColumn Header="Trigger" Binding="{Binding DisplayTrigger}" IsReadOnly="True" Width="2*"/>
                    <DataGridTextColumn Header="Action" Binding="{Binding Action.Name}" IsReadOnly="True" Width="2*"/>
                    <DataGridTextColumn Header="Command" Binding="{Binding Action.Command}" IsReadOnly="True" Width="2*"/>
                    <DataGridCheckBoxColumn Header="Aktiv"
                                Binding="{Binding Active, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                Width="60"
                                CanUserResize="False"
                                IsThreeState="False"/>
                    <DataGridTemplateColumn Header="" Width="50" CanUserResize="False">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button Content="Edit"
                                        Command="{Binding DataContext.EditCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                        CommandParameter="{Binding}"
                                        FontSize="14"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Border>

        <!-- Editor -->
        <Border Grid.Row="2"
                Style="{StaticResource CardBorderStyle}"
                Margin="0,8,0,0"
                Visibility="{Binding IsEditing, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid Margin="12"
                  Visibility="{Binding IsEditing, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- Name -->
                <TextBlock Grid.Row="0" Grid.Column="0" Text="Name" VerticalAlignment="Center"/>
                <TextBox Grid.Row="0" Grid.Column="1"
                         Text="{Binding EditedHotkey.Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                <!-- Action (durchsuchbar) -->
                <TextBlock Grid.Row="1" Grid.Column="0" Text="Action" VerticalAlignment="Center" Margin="0,8,0,0"/>
                <DockPanel Grid.Row="1" Grid.Column="1" Margin="0,8,0,0">
                    <ComboBox ItemsSource="{Binding ActionsView}"
                              Style="{StaticResource AutoOpenComboStyle}"
                              IsEditable="True"
                              StaysOpenOnEdit="True"
                              IsTextSearchEnabled="True"
                              SelectedItem="{Binding EditedHotkey.Action.Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              MinWidth="280"/>
                </DockPanel>

                <!-- Command (durchsuchbar) -->
                <TextBlock Grid.Row="2" Grid.Column="0" Text="Command" VerticalAlignment="Center" Margin="0,8,0,0"/>
                <DockPanel Grid.Row="2" Grid.Column="1" Margin="0,8,0,0">
                    <ComboBox ItemsSource="{Binding CommandsView}"
                              Style="{StaticResource AutoOpenComboStyle}"
                              IsEditable="True"
                              StaysOpenOnEdit="True"
                              IsTextSearchEnabled="True"
                              SelectedItem="{Binding EditedHotkey.Action.Command, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              MinWidth="200"/>
                </DockPanel>

                <!--Aktiv-->
                <TextBlock Grid.Row="3" Grid.Column="0" Text="Aktiv" VerticalAlignment="Center" Margin="0,8,0,0"/>
                <DockPanel Grid.Row="3" Grid.Column="1" Margin="0,8,0,0">
                    <CheckBox DockPanel.Dock="Left"
                              Margin="0,0,8,0"
                              VerticalAlignment="Center"
                              IsThreeState="False"
                              IsEnabled="True"
                              IsChecked="{Binding EditedHotkey.Active, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              ToolTip="Hotkey ist aktiv/inaktiv">
                    </CheckBox>
                </DockPanel>
                
                <!-- Trigger -->
                <TextBlock Grid.Row="4" Grid.Column="0" Text="Trigger" VerticalAlignment="Center" Margin="0,8,0,0"/>
                <StackPanel Grid.Row="4" Grid.Column="1" Orientation="Horizontal" Margin="0,8,0,0" >
                    <!-- Anzeige: berechnete Property; aktualisiert sich sofort -->
                    <TextBox IsReadOnly="True" Width="240"
                             Text="{Binding EditedHotkey.DisplayTrigger, Mode=OneWay}" />

                    <!-- Start/Status-Button -->
                    <Button Margin="8,0,0,0"
                            Content="{Binding IsCapturing, Converter={StaticResource InverseBooleanToContentConverter}, ConverterParameter='Erfassen...,Erfassung läuft...'}"
                            Command="{Binding StartCaptureCommand}"
                            IsEnabled="{Binding IsCapturing, Converter={StaticResource InverseBooleanConverter}}" />

                    <!-- Abbrechen nur sichtbar während Capture -->
                    <Button Margin="8,0,0,0"
                            Content="Abbrechen"
                            Command="{Binding CancelCaptureCommand}"
                            Visibility="{Binding IsCapturing, Converter={StaticResource BooleanToVisibilityConverter}}" />
                </StackPanel>

                <!-- Aktionen -->
                <StackPanel Grid.Row="5" Grid.Column="1" Orientation="Horizontal" Margin="0,12,0,0">
                    <Button Content="Speichern" Command="{Binding SaveEditCommand}" Margin="0,0,8,0"/>
                    <Button Content="Abbrechen" Command="{Binding CancelEditCommand}" />
                </StackPanel>
            </Grid>
        </Border>
    </Grid>
</UserControl>
