name: Build YOLO ONNX
run-name: "Build YOLO ONNX – ${{ inputs.model_key || 'manual' }}"

on:
  workflow_dispatch:
    inputs:
      model_url:
        description: "PT Download-URL (z.B. https://.../yolov8n.pt)"
        required: true
      model_key:
        description: "Kurzname fürs Manifest (z.B. yolov8n)"
        required: true
      imgsz:
        description: "Inputgröße (default 640)"
        default: "640"
      opset:
        description: "ONNX Opset (default 12)"
        default: "12"
      display_name:
        description: "Anzeigename (z.B. YOLOv8 Nano)"
        default: ""
      description:
        description: "Kurzbeschreibung fürs UI"
        default: ""
      ultralytics_spec:
        description: "Ultralytics Version/Fork (pip specifier)"
        default: "ultralytics>=8.0.0"
      advanced_opts:
        description: "Optional: key=value (je Zeile). Keys: torch_spec, extra_pip, pickle_alias_from, pickle_alias_to"
        default: ""

jobs:
  export-onnx:
    name: "Export ${{ inputs.model_key }} to ONNX"
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Parse advanced options
        id: adv
        run: |
          set -euo pipefail

          # Datei mit den advanced_opts anlegen (mehrzeilig möglich)
          cat > adv_opts.txt << 'EOF'
          ${{ github.event.inputs.advanced_opts }}
          EOF

          TORCH_SPEC=""
          EXTRA_PIP=""
          PICKLE_FROM=""
          PICKLE_TO="DetectionModel"  # Default

          while IFS= read -r line; do
            # Leerzeilen/Kommentare überspringen
            [ -z "${line// }" ] && continue
            case "$line" in \#*) continue ;; esac

            # key=value (nur erstes '=' trennt; Werte können '==' enthalten)
            key="${line%%=*}"
            val="${line#*=}"
            key="$(echo "$key" | xargs)"   # trim
            val="$(echo "$val" | xargs)"   # trim
            [ -z "$key" ] && continue

            case "$key" in
              torch_spec)         TORCH_SPEC="$val" ;;
              extra_pip)          EXTRA_PIP="$val" ;;
              pickle_alias_from)  PICKLE_FROM="$val" ;;
              pickle_alias_to)    PICKLE_TO="$val" ;;
              *) echo "::notice::Unbekannte Option in advanced_opts ignoriert: $key" ;;
            esac
          done < adv_opts.txt

          {
            echo "TORCH_SPEC=$TORCH_SPEC"
            echo "EXTRA_PIP=$EXTRA_PIP"
            echo "PICKLE_ALIAS_FROM=$PICKLE_FROM"
            echo "PICKLE_ALIAS_TO=$PICKLE_TO"
          } >> "$GITHUB_ENV"

          echo "[info] Parsed advanced opts:"
          echo "  TORCH_SPEC=$TORCH_SPEC"
          echo "  EXTRA_PIP=$EXTRA_PIP"
          echo "  PICKLE_ALIAS_FROM=$PICKLE_FROM"
          echo "  PICKLE_ALIAS_TO=$PICKLE_TO"

      - name: Install deps (CPU-only)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel

          if [ -n "${TORCH_SPEC:-}" ]; then
            echo "[info] Installing torch: ${TORCH_SPEC}"
            pip install "${TORCH_SPEC}"
          fi

          echo "[info] Installing ultralytics: ${{ github.event.inputs.ultralytics_spec }}"
          pip install "${{ github.event.inputs.ultralytics_spec }}" onnx onnxsim

          if [ -n "${EXTRA_PIP:-}" ]; then
            echo "[info] Installing extra packages: ${EXTRA_PIP}"
            pip install ${EXTRA_PIP}
          fi

          echo "[info] Versions:"
          python - << 'PY'
          import sys, importlib
          def show(n):
              try:
                  m=importlib.import_module(n)
                  print(f"{n}: {getattr(m,'__version__',None)}")
              except Exception as e:
                  print(f"{n}: <not installed> ({e})")
          for n in ["torch","ultralytics","onnx","onnxsim"]:
              show(n)
          print("python:", sys.version)
          PY

      - name: Download .pt
        run: |
          set -euo pipefail
          curl -fL "${{ github.event.inputs.model_url }}" -o model.pt
          ls -lah model.pt

      - name: Export to ONNX (Ultralytics)
        env:
          IMGSZ:             ${{ github.event.inputs.imgsz }}
          OPSET:             ${{ github.event.inputs.opset }}
          PICKLE_ALIAS_FROM: ${{ env.PICKLE_ALIAS_FROM }}
          PICKLE_ALIAS_TO:   ${{ env.PICKLE_ALIAS_TO }}
        run: |
          set -euo pipefail
          python - << 'PY'
          import os
          from ultralytics import YOLO

          alias_from = os.environ.get("PICKLE_ALIAS_FROM","").strip()
          alias_to   = os.environ.get("PICKLE_ALIAS_TO","DetectionModel").strip() or "DetectionModel"
          if alias_from:
              print(f"[warn] Applying pickle alias: {alias_from} -> {alias_to}")
              import ultralytics.nn.tasks as tasks
              target = getattr(tasks, alias_to, None)
              if target is None:
                  raise RuntimeError(f"Zielklasse '{alias_to}' existiert nicht in ultralytics.nn.tasks")
              setattr(tasks, alias_from, target)

          imgsz = int(os.environ.get("IMGSZ","640"))
          opset = int(os.environ.get("OPSET","12"))
          print("[info] Lade Modell…")
          m = YOLO("model.pt")
          print("[info] Export…")
          r = m.export(format="onnx", imgsz=imgsz, opset=opset, simplify=True, project="runs", name="export")
          print("[info] export result:", r)
          PY
          echo "[debug] Inhalt von runs/:"
          find runs -maxdepth 3 -type f -printf "%p (%s bytes)\n" || true

      - name: Find ONNX and compute SHA256
        id: meta
        run: |
          set -euo pipefail
          ONNX=$(find runs/export -name "*.onnx" -type f | head -n1 || true)
          if [ -z "${ONNX}" ]; then
            ONNX=$(find . -name "*.onnx" -type f | head -n1 || true)
          fi
          if [ -z "${ONNX}" ]; then
            echo "::error::Keine .onnx-Datei gefunden. Prüfe Export-Logs oben."
            exit 1
          fi
          echo "[info] Gefundene ONNX: ${ONNX}"
          KEY="${{ github.event.inputs.model_key }}"
          TARGET="${KEY}.onnx"
          cp "$ONNX" "$TARGET"
          SIZE=$(stat -c%s "$TARGET")
          SHA=$(sha256sum "$TARGET" | cut -d ' ' -f1)
          echo "file=$TARGET"   >> $GITHUB_OUTPUT
          echo "size=$SIZE"     >> $GITHUB_OUTPUT
          echo "sha256=$SHA"    >> $GITHUB_OUTPUT

      - name: Create/Update Release and upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: models-${{ github.run_number }}
          name: "YOLO Models build #${{ github.run_number }}"
          draft: false
          prerelease: false
          files: ${{ steps.meta.outputs.file }}

      - name: Install jq (JSON tool)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Update manifest (yolo-models.json)
        env:
          KEY:   ${{ github.event.inputs.model_key }}
          SIZE:  ${{ steps.meta.outputs.size }}
          SHA:   ${{ steps.meta.outputs.sha256 }}
          REPO:  ${{ github.repository }}
          RUN:   ${{ github.run_number }}
          DISP:  ${{ github.event.inputs.display_name }}
          DESC:  ${{ github.event.inputs.description }}
        run: |
          set -euo pipefail
          MANIFEST="ImageDetection/YOLO/Resources/yolo-models.json"
          URL="https://github.com/${REPO}/releases/download/models-${RUN}/${KEY}.onnx"

          mkdir -p "$(dirname "$MANIFEST")"
          [ -f "$MANIFEST" ] || echo '{}' > "$MANIFEST"

          tmp=$(mktemp)
          jq \
            --arg key "$KEY" \
            --arg url "$URL" \
            --arg sha "$SHA" \
            --argjson size "$SIZE" \
            --arg disp "$DISP" \
            --arg desc "$DESC" \
            '.[$key] = ((.[$key] // {}) + {
                url:        $url,
                sha256:     $sha,
                size:       $size,
                displayName:(if ($disp|length) > 0 then $disp else $key end),
                description:$desc
              })' "$MANIFEST" > "$tmp"
          mv "$tmp" "$MANIFEST"

          echo "[info] Manifest aktualisiert:"
          cat "$MANIFEST"

      - name: Create Pull Request for manifest update
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.ONNX_Export_Token }}
          commit-message: "chore(manifest): update ${{ github.event.inputs.model_key }}"
          title: "Manifest: ${{ github.event.inputs.model_key }} → models-${{ github.run_number }}"
          body: |
            Auto-PR aus dem Export-Workflow.
            - Modell: `${{ github.event.inputs.model_key }}`
            - Opset:  `${{ github.event.inputs.opset }}`
            - ImgSz:  `${{ github.event.inputs.imgsz }}`
            - Build:  `models-${{ github.run_number }}`
          branch: "ci/manifest-${{ github.event.inputs.model_key }}-${{ github.run_number }}"
          base: ${{ github.event.repository.default_branch }}
          add-paths: |
            ImageDetection/YOLO/Resources/yolo-models.json
          labels: |
            ci
            manifest
          delete-branch: true
